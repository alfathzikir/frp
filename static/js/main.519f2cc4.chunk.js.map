{"version":3,"sources":["store/myWords.ts","components/FirstPerson.tsx","components/SecondPerson.tsx","components/PersonSwitcher.tsx","App.tsx","index.tsx"],"names":["IAction","subject","Subject","initialState","data","newDataCount","state","update","index","console","log","Clear","next","Send","Favorite","undefined","favorited","Error","wordsStore","init","subscribe","setState","FirstPerson","useState","chatState","setChatState","useEffect","className","map","message","person","style","backgroundColor","marginRight","onClick","text","id","onSubmit","e","preventDefault","messageObject","currentTarget","messageInput","value","trim","width","type","name","placeholder","required","SecondPerson","float","marginLeft","PersonSwitcher","location","window","href","split","messageNotification","to","length","App","path","component","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.519f2cc4.chunk.js","sourcesContent":["import { Subject } from \"rxjs\";\n\nexport const subject = new Subject();\n\nexport type Data = {\n    person: string;\n    text: string;\n    favorited: boolean;\n};\n\nexport type IModel = {\n    data: Data[];\n    newDataCount: number;\n};\n\nexport type IFavorite = {};\n\nexport enum IAction {\n    Send,\n    Clear,\n    Favorite,\n}\n\nexport type IUpdate = IAction;\n\nexport const initialState: IModel = {\n    data: [],\n    newDataCount: 0,\n};\n\nlet state = initialState;\n\nconst wordsStore = {\n    init: () => subject.next(state),\n    subscribe: (setState: any) => subject.subscribe(setState),\n    initialState,\n};\n\nexport const update = (update: IUpdate, data: Data, index?: number) => {\n    console.log(state);\n    switch (update) {\n        case IAction.Clear:\n            state = initialState;\n            subject.next(state);\n            break;\n        case IAction.Send:\n            state = {\n                ...state,\n                data: [...state.data, data],\n                newDataCount: state.newDataCount + 1,\n            };\n            subject.next(state);\n            break;\n        case IAction.Favorite:\n            if (index !== undefined) {\n                state.data[index].favorited = !state.data[index].favorited;\n                state = {\n                    ...state,\n                };\n            }\n            subject.next(state);\n            break;\n        default:\n            throw new Error(\"Need to be exhaustive\");\n    }\n};\n\nexport default wordsStore;\n","import React, { useEffect, useState } from \"react\";\nimport wordsStore, { IAction, update } from \"../store/myWords\";\n\nconst FirstPerson = () => {\n    const [chatState, setChatState] = useState(wordsStore.initialState);\n\n    useEffect(() => {\n        wordsStore.subscribe(setChatState);\n        wordsStore.init();\n    }, []);\n\n    const onFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const messageObject = {\n            person: \"first-person\",\n            text: e.currentTarget.messageInput.value.trim(),\n            favorited: false,\n        };\n\n        update(IAction.Send, messageObject);\n    };\n\n    return (\n        <div className=\"container\">\n            <h2>Alfath 1</h2>\n            <div className=\"chat-box\">\n                {chatState.data.map((message, index) => (\n                    <div>\n                        <p\n                            className={message.person}\n                            style={{\n                                backgroundColor: message.favorited\n                                    ? \"red\"\n                                    : undefined,\n                            }}\n                        >\n                            {\" \"}\n                            {message.person === \"second-person\" ? (\n                                <button\n                                    style={{ marginRight: \"100px\" }}\n                                    onClick={() =>\n                                        update(\n                                            IAction.Favorite,\n                                            {\n                                                person: \"\",\n                                                text: \"\",\n                                                favorited: false,\n                                            },\n                                            index\n                                        )\n                                    }\n                                >\n                                    {message.favorited\n                                        ? \"unfavorite\"\n                                        : \"Favorite\"}\n                                </button>\n                            ) : null}\n                            {message.text}\n                        </p>\n                        <div className=\"clear\"></div>\n                    </div>\n                ))}\n            </div>\n\n            <form\n                id=\"messageForm\"\n                onSubmit={onFormSubmit}\n                style={{ width: 800 }}\n            >\n                <input\n                    type=\"text\"\n                    id=\"messageInput\"\n                    name=\"messageInput\"\n                    placeholder=\"type here...\"\n                    required\n                />\n                <button type=\"submit\">Send</button> <br />\n            </form>\n            <button\n                className=\"clear-button\"\n                onClick={() =>\n                    update(IAction.Clear, {\n                        person: \"\",\n                        text: \"\",\n                        favorited: false,\n                    })\n                }\n            >\n                Clear Chat\n            </button>\n        </div>\n    );\n};\n\nexport default FirstPerson;\n","import React, { useState, useEffect } from \"react\";\nimport wordsStore, { IAction, update } from \"../store/myWords\";\n\nconst SecondPerson = () => {\n    const [chatState, setChatState] = useState(wordsStore.initialState);\n\n    useEffect(() => {\n        wordsStore.subscribe(setChatState);\n        wordsStore.init();\n    }, []);\n\n    const onFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const messageObject = {\n            person: \"second-person\",\n            text: e.currentTarget.messageInput.value.trim(),\n            favorited: false,\n        };\n\n        update(IAction.Send, messageObject);\n    };\n    return (\n        <div className=\"container\">\n            <h2 style={{ float: \"right\" }}>Alfath 2</h2>\n            <div className=\"chat-box\">\n                {chatState.data.map((message, index) => (\n                    <div>\n                        <p\n                            className={message.person}\n                            style={{\n                                backgroundColor: message.favorited\n                                    ? \"red\"\n                                    : undefined,\n                            }}\n                        >\n                            {message.text}\n                            {message.person === \"first-person\" ? (\n                                <button\n                                    style={{ marginLeft: \"100px\" }}\n                                    onClick={() =>\n                                        update(\n                                            IAction.Favorite,\n                                            {\n                                                person: \"\",\n                                                text: \"\",\n                                                favorited: false,\n                                            },\n                                            index\n                                        )\n                                    }\n                                >\n                                    {\" \"}\n                                    {console.log(index)}\n                                    Favorite\n                                </button>\n                            ) : null}\n                        </p>\n                        <div className=\"clear\"></div>\n                    </div>\n                ))}\n            </div>\n            <form id=\"messageForm\" onSubmit={onFormSubmit}>\n                <input\n                    type=\"text\"\n                    id=\"messageInput\"\n                    name=\"messageInput\"\n                    required\n                />\n                <button type=\"submit\">Send</button> <br />\n            </form>\n            <button\n                className=\"clear-button\"\n                onClick={() =>\n                    update(IAction.Clear, {\n                        person: \"\",\n                        text: \"\",\n                        favorited: false,\n                    })\n                }\n            >\n                Clear Chat\n            </button>\n        </div>\n    );\n};\n\nexport default SecondPerson;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport wordsStore from \"../store/myWords\";\n\nconst PersonSwitcher = () => {\n    const [chatState, setChatState] = useState(wordsStore.initialState);\n    const location = window.location.href.split(\"/\")[3];\n\n    useEffect(() => {\n        wordsStore.subscribe(setChatState);\n        wordsStore.init();\n    }, []);\n\n    const messageNotification = chatState.newDataCount > 0 && (\n        <span className=\"notify\">{chatState.newDataCount}</span>\n    );\n\n    return (\n        <div className=\"switcher-div\">\n            <Link to=\"/first-person\">\n                <button className=\"switcher\">\n                    Person1\n                    {location !== \"first-person\" &&\n                        location.length > 1 &&\n                        messageNotification}\n                </button>\n            </Link>\n            <Link to=\"/second-person\">\n                <button className=\"switcher\">\n                    Person2\n                    {location !== \"second-person\" && messageNotification}\n                </button>\n            </Link>\n        </div>\n    );\n};\n\nexport default PersonSwitcher;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { FirstPerson, SecondPerson, PersonSwitcher } from \"./components\";\nimport \"./index.css\";\n\nconst App = () => (\n    <Router>\n        <>\n            <PersonSwitcher />\n            <Switch>\n                <Route path=\"/\" component={FirstPerson} exact />\n                <Route path=\"/first-person\" component={FirstPerson} exact />\n                <Route path=\"/second-person\" component={SecondPerson} exact />\n            </Switch>\n        </>\n    </Router>\n);\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}